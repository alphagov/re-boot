---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: argo-deployment-workflow-
spec:
  entrypoint: argo-apply

  templates:
  - name: argo-apply
    steps:
    - - name: argo-ns-create
        template: kubectl-ns-create
        arguments:
          parameters:
          - name: ns-to-create
            value: default

    - - name: argo-deploy
        template: argo-create
        arguments:
          parameters:
          - name: repo-manifest-dir
            value: "kops/argo"
          - name: repo-manifest-file
            value: "001-argo.yaml"

    - - name: argo-up
        template: check-lb-service-up
        arguments:
          parameters:
          - name: service-name
            value: argocd-server
          - name: service-namespace
            value: default
          - name: lb-check-timeout
            value: 300
          - name: lb-check-period
            value: 5

  - name: kubectl-ns-create
    inputs:
      parameters:
      - name: ns-to-create
    container:
      image: docker.io/lachlanevenson/k8s-kubectl:v1.11.2-bash
      command: ["/bin/bash", "-c"]
      args: ["kubectl get namespace {{inputs.parameters.ns-to-create}}; RET=$?; if [ ${RET} -ne 0 ]; then kubectl create namespace {{inputs.parameters.ns-to-create}}; fi;"]
      imagePullPolicy: Always

  - name: argo-create
    inputs:
      parameters:
      - name: repo-manifest-dir
      - name: repo-manifest-file
      artifacts:
      - name: re-boot-source
        path: /src
        git:
          repo: "https://github.com/alphagov/re-boot"
          revision: "master"
    container:
      image: docker.io/lachlanevenson/k8s-kubectl:v1.11.2-bash
      command: ["/bin/bash", "-c"]
      args: ["cd /src && kubectl apply -f {{inputs.parameters.repo-manifest-dir}}/{{inputs.parameters.repo-manifest-file}}"]
      imagePullPolicy: Always

  - name: check-lb-service-up
    inputs:
      parameters:
      - name: service-name
      - name: service-namespace
      - name: lb-check-timeout
      - name: lb-check-period
    container:
      image: docker.io/lachlanevenson/k8s-kubectl:v1.11.2-bash
      command: ["/bin/bash", "-x", "-c"]
      args: ["ITER=0; MAX_ITER=$(( {{inputs.parameters.lb-check-timeout}} / {{inputs.parameters.lb-check-period}} )); while [ ${ITER} -lt ${MAX_ITER} ]; do IP=$(kubectl get service {{inputs.parameters.service-name}} --namespace {{inputs.parameters.service-namespace}} -o json | jq '.status.loadBalancer.ingress[0].ip'); if [ \"${IP}\" != \"null\" ]; then echo \"{{inputs.parameters.service-name}} load balanced service came up on ip ${IP}\"; exit 0; fi; echo \"Waiting for grafana to come up\"; sleep {{inputs.parameters.lb-check-period}}; ITER=$((ITER+1)); done; echo \"ERROR: Timeout waiting for service to come up\"; exit 1"]
      imagePullPolicy: Always